# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Advertisement {
    id: String!
    imagePath: String!
    name: String
    position: String!
}

type App {
    _id: String
    advertisements: [Advertisement!]!
    appLogo: String!
    appName: String!
    bookmaker: Float!
    commissionRate: Float!
    createdAt: String
    currentTime: String!
    maxStake: Float!
    maxWin: Float!
    minStake: Float!
    rules: String
    updatedAt: String
    vatRate: Float!
    withdrawalLimit: Float!
}

type BasicOdd {
    more: Float!
    odds: [Odd!]
}

type Bet {
    _id: String
    betId: String!
    createdAt: String
    fixtureId: String!
    fixtureName: String!
    oddValue: Float!
    status: Float
    ticket: Ticket!
    type: String!
    updatedAt: String
    value: String!
}

type Bets {
    baseline: String
    id: String
    lastUpdate: String
    name: String
    price: Float
    settlement: BetSettlement
    startPrice: Float
    status: Float
}

type Bookmaker {
    _id: ID!
    createdAt: String
    id: String
    name: String
    updatedAt: String
}

type Contact {
    type: String!
    value: String!
}

type Country {
    _id: ID!
    code: String
    createdAt: String
    flag: String
    id: String!
    isAvailable: Boolean!
    leagues: [League!]!
    name: String!
    order: Float
    updatedAt: String
}

type DepositRequest {
    _id: String
    confirmed: Boolean!
    createdAt: String
    customer: User!
    denied: Boolean!
    evidence: String!
    evidenceType: EvidenceType!
    requestId: String!
    transactionId: String
    transferSource: TransferSource!
    updatedAt: String
}

type Fixture {
    _id: ID!
    basicOdds: BasicOdd!
    country: Country!
    countryId: String!
    createdAt: String
    id: String!
    league: League!
    leagueId: String!
    liveScore: LiveScore
    odds: [Odd!]
    participants: [Participant!]!
    sport: Sport!
    sportId: String!
    startDate: String!
    status: ScoreboardStatus!
    updatedAt: String
}

type Incident {
    IncidentType: IncidentType
    ParticipantPosition: Float
    Period: String
    PlayerName: String
    Results: [Result!]
    Seconds: String
}

type League {
    _id: ID!
    country: Country!
    countryId: String!
    createdAt: String
    fixtures: [Fixture!]!
    id: String!
    isAvailable: Boolean!
    isTop: Boolean!
    logo: String
    name: String!
    order: String
    sport: Sport!
    sportId: String!
    type: String
    updatedAt: String
}

type LiveScore {
    _id: ID!
    createdAt: String
    fixtureId: String!
    score: livescore!
    updatedAt: String
}

type Location {
    lat: Float!
    lon: Float!
}

type LoginResponse {
    accessToken: String!
    expiresIn: Float!
    refreshToken: String!
    tokenType: String
}

type Market {
    _id: ID!
    createdAt: String
    id: String!
    isAvailable: Boolean!
    name: String!
    order: Float
    updatedAt: String
}

type Message {
    _id: String
    createdAt: String
    customerId: String!
    isRead: Boolean!
    messageBody: String!
    messageHead: String!
    updatedAt: String
}

type Mutation {
    changeUserActive(id: String!): String!
    confirmDepositRequest(id: String!, updateDepositRequestInput: UpdateDepositRequestDto!): DepositRequest!
    createDepositRequest(depositRequestInput: DepositRequestDto!): DepositRequest!
    createShop(shopInput: ShopDto!): Shop!
    deleteDepositRequest(id: String!): String!
    denyDepositRequest(id: String!): DepositRequest!
    duplicateTicket(id: String!, stake: Float!): Ticket!
    login(loginInput: LoginDto!): LoginResponse!
    makeTransaction(transaction: TransactionDTO!): Transaction!
    payWonTicket(id: String!): Ticket!
    placeTicket(input: TicketDTO!): Ticket!
    register(userInput: UserDto!): RegisterResponse!
    resetPassword(accessToken: String!, id: String!, password: String!): User!
    saveTicket(input: TicketDTO!): Ticket!
    updateAdvertisement(adInput: AdvertisementDTO!, id: String!): App!
    updateApp(appInput: AppDto!, id: String!): App!
    updateCountry(id: String!, updateInput: CountryDTO!): Country!
    updateFixture(id: String!, updateInput: FixtureDTO!): Fixture!
    updateLeague(id: String!, updateInput: LeagueDTO!): League!
    updateMarket(id: String!, updateInput: MarketDTO!): Market!
    updateMessage(id: String!): Message!
    updateProfileImage(id: String!, image: String!): User!
    updateShop(id: String!, shopInput: UpdateShopDTO!): Shop!
    updateSport(id: String!, updateInput: SportDTO!): Sport!
    updateTicket(id: String!, updateInput: UpdateTicketDTO!): Ticket!
    updateUser(id: String!, updateInput: UserUpdateDTO!): User!
    uploadFile(file: Upload!): String!
    verify(accessToken: String!, id: String!): User!
}

type Odd {
    _id: ID!
    bets: [Bets!]
    bookmaker: String!
    bookmakerId: String!
    createdAt: String
    fixture: Fixture!
    fixtureId: String!
    market: Market
    marketId: String!
    updatedAt: String
}

type Participant {
    id: String
    isActive: Boolean
    name: String
    position: Float
    rotationId: Float
}

type Period {
    Incidents: [Incident!]
    IsConfirmed: Boolean
    IsFinished: Boolean
    Results: [Result!]
    Type: Float
}

type Query {
    app: App!
    bets: [Bet!]!
    bookmakers: [Bookmaker!]!
    checkTicket(placementId: String!): Ticket!
    countries: [Country!]!
    country(id: String!): Country!
    depositRequests: [DepositRequest!]!
    fixture(id: String!): Fixture
    fixtures(id: String, isAvailable: Boolean, leagueId: String, sportId: String, status: ScoreboardStatus = Not_started_yet): [Fixture!]!
    isUserExists(phoneNumber: String!): User!
    league(id: String!): League!
    leagues(countryId: String, isAvailable: Boolean, isTop: Boolean, sportId: String): [League!]!
    markets: [Market!]!
    messages: [Message!]!
    odd(id: String!): Odd!
    odds(fixtureId: String): [Odd!]!
    report(from: String, to: String): [ReportDetail!]!
    shop(id: String!): Shop!
    shops: [Shop!]!
    sport(id: String!): Sport!
    sports: [Sport!]!
    ticket(id: String!): Ticket!
    tickets(date: String, isExpired: Boolean = false, isPlaced: Boolean, placerType: String, status: String, userID: String): [Ticket!]!
    transactions(cashierUsername: String, customerUsername: String, from: String, to: String, type: TransactionType): [Transaction!]!
    user(id: String!): User!
    users(firstName: String, lastName: String, role: Role, username: String): [User!]!
    whoami: User!
}

type RegisterResponse {
    id: String!
    message: String!
    success: Boolean!
}

type ReportDetail {
    balance: Float!
    comission: Float!
    date: String!
    noPlayed: Float!
    noWinners: Float!
    playedMoney: Float!
    wonMoney: Float!
}

type Result {
    Position: String
    Value: String
}

type Scoreboard {
    CurrentPeriod: Float
    Description: String
    Results: [Result!]
    Status: String
    Time: String
}

type Shop {
    _id: String
    admin: User!
    branchName: String!
    contacts: [Contact!]
    createdAt: String
    isActive: Boolean!
    location: Location
    updatedAt: String
}

type Sport {
    _id: ID!
    createdAt: String
    fixtures: [Fixture!]!
    icon: String
    id: String
    isAvailable: Boolean!
    name: String!
    order: Float
    updatedAt: String
}

type Statistic {
    Type: IncidentType
    Value: StatisticsValue
}

type StatisticsValue {
    Position: String
    Value: String
}

type Ticket {
    _id: String
    bets: [Bet!]
    createdAt: String
    isExpired: Boolean!
    isPlaced: Boolean!
    paidDate: String
    payer: User
    payerID: String
    placedDate: String
    placementID: String
    placerType: PlacerType!
    resolvedDate: String
    shop: Shop
    shopID: String
    stake: Float!
    status: TicketStatus!
    ticketID: String!
    totalOdds: Float!
    updatedAt: String
    user: User
    userID: String
    vatValue: Float!
}

type Transaction {
    _id: String
    amount: Float!
    balanceAfterTransaction: Float!
    cashier: User!
    createdAt: String
    customer: User!
    shop: Shop!
    type: TransactionType!
    updatedAt: String
}

type User {
    _id: String
    accountBalance: Float!
    belongsToShop: String
    cashierPermissions: [CashierPermission!]
    createdAt: String
    firstName: String!
    isActive: Boolean!
    isLocked: Boolean!
    isVerified: Boolean!
    lastName: String!
    profileImage: String!
    role: Role!
    updatedAt: String
    username: String!
    usernameType: UsernameType!
}

type livescore {
    Periods: [Period!]!
    Scoreboard: Scoreboard
    Statistics: [Statistic!]!
}

enum BetSettlement {
    Cancelled
    HalfLost
    HalfWon
    Loser
    Refund
    Winner
}

enum CashierPermission {
    CREATE_DEPOSIT
    CREATE_WITHDRAWAL
    HANDLE_DEPOSIT_REQUEST
    PLACE_TICKETS
}

enum EvidenceType {
    TRANSACTION_ID
    TRANSACTION_PICTURE
}

enum IncidentType {
    Baseball_Hits
    Basketball_Fouls
    Basketball_Free_throws
    Basketball_Three_points
    Basketball_Time_outs
    Basketball_Two_points
    Football_Corners
    Football_Goal
    Football_Missed_penalty
    Football_Own_goal
    Football_Penalties
    Football_Penalty_goal
    Football_Red_cards
    Football_Substitutions
    Football_Yellow_cards
    IceHockey_Penalties
    Tennis_Aces
    Tennis_Double_faults
    Tennis_First_serve_wins
}

enum PlacerType {
    CASHIER
    CUSTOMER
    GUEST
}

enum Role {
    ADMIN
    CASHIER
    CUSTOMER
    SUPER_ADMIN
}

enum ScoreboardStatus {
    Abandoned
    About_to_start
    Cancelled
    Coverage_lost
    Finished
    In_progress
    Interrupted
    Not_started_yet
    Postponed
}

enum TicketStatus {
    LOSE
    PENDING
    WIN
}

enum TransactionType {
    DEPOSIT
    WITHDRAW
}

enum TransferSource {
    AMOLE
    BANK
    CBE
    MBIRR
}

enum UsernameType {
    EMAIL
    PHONE
}

input AdvertisementDTO {
    id: String
    imagePath: String!
    name: String
    position: String = "Header"
}

input AppDto {
    advertisements: [AdvertisementDTO!]
    appLogo: String
    appName: String
    bookmaker: Float
    commissionRate: Float
    maxStake: Float
    maxWin: Float
    minStake: Float
    rules: String
    vatRate: Float
    withdrawalLimit: Float
}

input BetDTO {
    betId: String!
    fixtureId: String!
    fixtureName: String!
    oddValue: Float!
    type: String!
    value: String!
}

input ContactDTO {
    type: String!
    value: String!
}

input CountryDTO {
    isAvailable: Boolean
    order: Float
}

input DepositRequestDto {
    evidence: String!
    evidenceType: EvidenceType!
    transferSource: String!
}

input FixtureDTO {
    isAvailable: Boolean!
}

input LeagueDTO {
    isAvailable: Boolean
    isTop: Boolean
}

input LocationDTO {
    lat: Float!
    lon: Float!
}

input LoginDto {
    password: String!
    username: String!
}

input MarketDTO {
    isAvailable: Boolean!
}

input ShopDto {
    adminId: String!
    branchName: String!
    contacts: [ContactDTO!]
    isActive: Boolean = true
    location: LocationDTO
}

input SportDTO {
    isAvailable: Boolean!
    order: Float
}

input TicketDTO {
    bets: [BetDTO!]!
    stake: Float!
}

input TransactionDTO {
    amount: Float!
    customer: String!
    type: TransactionType!
}

input UpdateDepositRequestDto {
    amount: Float!
}

input UpdateShopDTO {
    adminId: String
    branchName: String
    contacts: [ContactDTO!]
    isActive: Boolean = true
    location: LocationDTO
}

input UpdateTicketDTO {
    isPlaced: Boolean = true
    stake: Float
}

input UserDto {
    belongsToShop: String
    cashierPermissions: [CashierPermission!]
    firstName: String!
    lastName: String!
    password: String!
    role: Role
    username: String!
}

input UserUpdateDTO {
    belongsToShop: String
    cashierPermissions: [CashierPermission!]
    firstName: String
    lastName: String
    password: String
    role: Role
    username: String
}


"The `Upload` scalar type represents a file upload."
scalar Upload